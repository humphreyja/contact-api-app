<section>
  <h1 id="welcome">Welcome to a Codelation Rails Project</h1>

  <p>
    We use strong conventions to organize our Rails projects, so let me show you around.
  </p>

  <p>
    &mdash; <a href="http://brianpattison.com" target="_blank">Brian Pattison</a>
  </p>
</section>

<section>
  <h2>Table of Contents</h2>

  <ul>
    <li>
      <a href="#code-organization">Code Organization</a>
      <ul>
        <li>
          <a href="#static-pages">1 Static Pages</a>
          <ul>
            <li><a href="#static-pages-views">1.1 Views</a></li>
            <li><a href="#static-pages-page-titles">1.2 Page Titles</a></li>
            <li><a href="#static-pages-stylesheets">1.3 Stylesheets</a></li>
            <li><a href="#static-pages-javascripts">1.4 JavaScripts</a></li>
            <li><a href="#static-pages-images">1.5 Images</a></li>
          </ul>
        </li>
        <li>
          <a href="#layout">2 Layout</a>
          <ul>
            <li><a href="#layout-application-layout">2.1 Application Layout</a></li>
            <li><a href="#layout-multiple-layouts">2.2 Multiple Layouts</a></li>
          </ul>
        </li>
        <li>
          <a href="#email">3 Email</a>
          <ul>
            <li><a href="#email-previews">3.1 Email Previews</a></li>
            <li><a href="#email-layout">3.2 Email Layout</a></li>
          </ul>
        </li>
      </ul>
    </li>
    <li>
      <a href="#codelation-assets">Codelation Assets</a>
      <ul>
        <li>
          <a href="#codelation-assets-stylesheets">1 Stylesheets</a>
          <ul>
            <li><a href="#single-page-styles">1.1 Single Page Styles</a></li>
            <li><a href="#sass-components">1.2 Reusable Components</a></li>
            <li><a href="#sass-functions-and-mixins">1.3 Functions and Mixins</a></li>
          </ul>
        </li>
        <li>
          <a href="#codelation-assets-javascripts">2 JavaScripts</a>
          <ul>
            <li><a href="#single-page-scripts">2.1 Single Page Scripts</a></li>
            <li><a href="#javascript-components">2.2 Reusable Components</a></li>
          </ul>
        </li>
      </ul>
    </li>
  </ul>
</section>

<section>
  <h2 id="code-organization">Code Organization</h2>

  <p>
    Projects of all sizes need to be organized, and we don&#39;t want you to hunt to find
    what you&#39;re looking for. Rails does a great job of having conventions in place for organizing
    your backend code. Rails does not have strong conventions for how you should organize your frontend
    code. <em>This document will walk you through how Codelation organizes a project&#39;s frontend code.</em>
  </p>

  <p>
    Let&#39;s go over the basics first: <strong>static pages</strong>. Static pages are no
    different than application pages, but there&#39;s a little more non-standard-Rails magic
    going on, so it&#39;s important to document the conventions being used.
  </p>
</section>

<section>
  <h3 id="static-pages">
    <span>
      <a href="#welcome"><i class="fa fa-arrow-circle-o-up"></i></a>
      1 Static Pages
    </span>
  </h3>

  <p>
    Every project is going to have a whole bunch of pages that <em>don&#39;t need backend functionality.</em>
    Let&#39;s talk about these pages first by giving an example of adding a new page to the project.
  </p>

  <p>
    <strong>Example:</strong> Creating an &quot;About Us&quot; page.
  </p>

  <p>
    All static pages are served by the <code>PagesController</code>, so the HTML/ERB files live in
    <code>app/views/pages</code>. The <code>PagesController</code> is a <em>generated controller</em>,
    so you won&#39;t find it on the <code>controllers</code> directory. If you define the controller,
    it will be used instead of the generated controller.
  </p>

  <p>
    Using strong conventions, <em>static pages will be made available by adding the right files.</em>
  </p>
</section>

<section>
  <h4 id="static-pages-views">
    1.1 Views
    <a href="#welcome"><i class="fa fa-angle-up"></i></a>
  </h4>

  <p>
    If I want my about page to live at
    <a href="http://example.com/about-us" target="_blank">http://example.com/about-us</a>,
    I would create the view file: <code>app/views/pages/about_us.html.erb</code>.
    The link helper will be available as <code>about_us_path</code>.
  </p>

  <h5>Subfolders</h5>

  <p>
    <em>You can also create pages within subfolders</em>, so if wanted to create a
    &quot;Features > Overview&quot; page that lives at
    <a href="http://example.com/features/overview" target="_blank">http://example.com/features/overview</a>,
    I would create the view file: <code>app/views/pages/features/overview.html.erb</code>.
    The link helper will be available as <code>features_overview_path</code>.
  </p>

  <p>
    Files with the name <code>index.html.erb</code> will be served at the root path for that directory.
    Example: <code>app/views/features/index.html.erb</code> will live at
    <a href="http://example.com/features" target="_blank">http://example.com/features</a>.
    The link helper will be available as <code>features_path</code>.
  </p>

  <p>
    Files within subfolders will not be served by the <code>PagesController</code>. They will
    be served by a generated controller matching the name of the folder. In the case of our
    &quot;Features > Overview&quot; page, the controller would be the <code>Pages::FeaturesController</code>.
  </p>
</section>

<section class="important">
  <h4>IMPORTANT</h4>

  <p>
    You will need to restart your server after adding new page files so the routes can be automatically registered.
  </p>
</section>

<section>
  <h4 id="static-pages-page-titles">
    1.2 Page Titles
    <a href="#welcome"><i class="fa fa-angle-up"></i></a>
  </h4>

  <p>
    This Rails project uses the
    <a href="https://github.com/calebthompson/title" target="_blank">title</a>
    gem to set the content of the <code>&lt;title&gt;</code> tag. This makes it
    easy to set the title of each page. The page titles live in the translations
    file(s). The controller and action are used to look up the title.
  </p>

  <p>
    The &quot;About Us&quot; page we created is served by the <code>PagesController</code>
    and the <code>about_us</code> action, so setting the title in
    <code>config/locales/en.yml</code> would look like this:
  </p>

<pre>
en:
  titles:
    application: This is the default title
    pages:
      about_us: About Us
      features:
        index: Features
        overview: Features > Overview
      index: Home Page
    posts:
      index: Codelation Blog
</pre>

  <p>
    <em>If you need to set the page title dynamically</em>, you can set <code>@title</code>:
  </p>

<pre>
class PostsController < ApplicationController
  def show
    @post = Post.find(params[:id])
    @title = @post.title
  end
end
</pre>
</section>

<section>
  <h4 id="static-pages-stylesheets">
    1.3 Stylesheets
    <a href="#welcome"><i class="fa fa-angle-up"></i></a>
  </h4>

  <p>
    We write our CSS using <a href="http://sass-lang.com" target="_blank">Sass</a>. All <code>.scss</code>
    files in <code>app/assets/stylesheets/application</code> are automatically loaded by
    <code>application.css</code>. The stylesheet files should be organized to <em>match the
    view&#39;s file name and location.</em>
  </p>

  <p>
    To match the &quot;About Us&quot; view we created, we would create the stylesheet
    <code>app/assets/stylesheets/application/views/about_us.scss</code>.
  </p>

  <p>
    Because all <code>.scss</code> files are automatically loaded, it&#39;s important to use
    the body class to limit the scope of the CSS that we write for each page.
  </p>

  <p>
    <strong>
      If you&#39;re looking to make <em>global/reusable CSS classes</em>, you can
     <a href="#sass-components">read about them here</a>.
    </strong>
  </p>

  <p>
    Every view is automatically given a body CSS class we can use to limit the scope in each of our
    <code>.scss</code> files. <em>The body class will reflect the current Rails controller and action.</em>
    In the case of our &quot;About Us&quot; page, the controller is the <code>PagesController</code>
    and the action matches the file name: <code>about_us</code>. All CSS class names should use
    dashes rather than underscores, so the body class will be <code>pages about-us</code>.
  </p>

  <p>
    Our <code>about_us.scss</code> file should look like this:
  </p>

<pre>
body.pages.about-us {
  <span class="code-comment">// List of features as three columns</span>
  .features {
    @include has-columns(3, 10px);
    background-color: $deep-purple;
    color: text-color($deep-purple);
  }
}
</pre>

  <p>
    <a href="#sass-mixins">Read more</a> about the Sass variables, functions, and mixins available in the project.
  </p>
</section>

<section>
  <h4 id="static-pages-javascripts">
    1.4 JavaScripts
    <a href="#welcome"><i class="fa fa-angle-up"></i></a>
  </h4>

  <p>
    Static pages don&#39;t usually need a lot of JavaScript, but you might need to sprinkle some in here or there.
  </p>

  <p>
    All <code>.js</code> files in <code>app/assets/javascripts/application</code> are automatically
    loaded by <code>application.js</code>. The JavaScript files should be organized to <em>match the
    view&#39;s file name and location.</em>
  </p>

  <p>
    To match the &quot;About Us&quot; view we created, we would create the JavaScript file
    <code>app/assets/javascripts/application/views/about_us.js</code>.
  </p>

  <p>
    Just like the CSS, all <code>.js</code> files are automatically loaded, so it&#39;s important to
    use the controller/action to limit which pages should fire off your JS.
  </p>

  <p>
    <strong>If you&#39;re looking to make <em>global/reusable JS components</em>, you can
    <a href="#javascript-components">read about them here</a>.</strong>
  </p>

  <p>
    Our <code>about_us.js</code> file should look like this:
  </p>

<pre>
App.register('pages.about-us').enter(function() {
  <span class="code-comment">// Fires when our &quot;About Us&quot; page loads.</span>
}).exit(function() {
  <span class="code-comment">// Fires when the user leaves the &quot;About Us&quot; page.</span>
  <span class="code-comment">// This only fires when using Turbolinks, and might be needed if</span>
  <span class="code-comment">// listening to a websockets channel or if doing some kind of polling.</span>
});
<span class="code-comment">// Sure feels a lot like our about_us.scss file... :)</span>
</pre>
</section>

<section>
  <h4 id="static-pages-images">
    1.5 Images
    <a href="#welcome"><i class="fa fa-angle-up"></i></a>
  </h4>

  <p>
    There&#39;s not a lot to say about images. <em>Organize them in folders based on the page name.</em>
    The images we use on our &quot;About Us&quot; page go in <code>app/assets/images/about_us</code>.
    If Rails complains about the asset not being precompiled, you can add the folder to the
    precompile list in <code>config/initializers/assets.rb</code>:
  </p>

<pre>
Rails.application.config.assets.precompile += %w(
  about_us/*
  home/*
  vendor.js
)
</pre>
</section>

<section>
  <h3 id="layout">
    <span>
      <a href="#welcome"><i class="fa fa-arrow-circle-o-up"></i></a>
      2 Layout
    </span>
  </h3>

  <p>
    Now that we have a home page (does this page count?) and our &quot;About Us&quot; page, we&#39;re going
    to need a layout so we can add navigation. Since we&#39;ve already added a page, you just need to
    know where things live because the file naming conventions are pretty much the same:
  </p>

  <h4 id="layout-multiple-layouts">
    2.1 Application Layout
    <a href="#welcome"><i class="fa fa-angle-up"></i></a>
  </h4>

  <h5>Views:</h5>

<pre>
app/views/layouts/application/_footer.html.erb
app/views/layouts/application/_header.html.erb
app/views/layouts/shared/_analytics.html.erb
app/views/layouts/shared/_flash_messages.html.erb
app/views/layouts/application.html.erb
</pre>

  <h5>Stylesheets:</h5>

<pre>
app/assets/stylesheets/application/layout/body.scss
app/assets/stylesheets/application/layout/flash_messages.scss
app/assets/stylesheets/application/layout/footer.scss
app/assets/stylesheets/application/layout/header.scss
</pre>

  <p>
    If you ever need to hide the header or footer, you can do this by adding
    <code>@hide_header = true</code> or <code>@hide_footer = true</code> to the
    controller&#39;s action.
  </p>
</section>

<section>
  <h4 id="layout-multiple-layouts">
    2.2 Multiple Layouts
    <a href="#welcome"><i class="fa fa-angle-up"></i></a>
  </h4>

  <p>
    Additional layouts should be created with the same conventions as the application layout,
    so if we wanted to create a layout called "backend", we would create the files:
  </p>

  <h5>Views:</h5>

<pre>
app/views/layouts/backend/_footer.html.erb
app/views/layouts/backend/_header.html.erb
app/views/layouts/backend.html.erb
</pre>

  <h5>Stylesheets:</h5>

<pre>
app/assets/stylesheets/backend/layout/body.scss
app/assets/stylesheets/backend/layout/flash_messages.scss
app/assets/stylesheets/backend/layout/footer.scss
app/assets/stylesheets/backend/layout/header.scss
</pre>

  <p>
    The code used for flash messages is always the same, and it&#39;s assumed that analytics
    should be included for the entire site. The <code>app/views/layouts/backend.html.erb</code>
    file should load the same partials from <code>app/views/layouts/shared/</code>.
  </p>
</section>

<section>
  <h3 id="email">
    <span>
      <a href="#welcome"><i class="fa fa-arrow-circle-o-up"></i></a>
      3 Email
    </span>
  </h3>

  <p>
    Almost every application needs to send emails. With this project template, it&#39;s easy to set up
    your email layout, use Sass for styling, and preview emails in your browser with Live Reload.
  </p>

  <h4 id="email-previews">
    3.1 Email Previews
    <a href="#welcome"><i class="fa fa-angle-up"></i></a>
  </h4>

  <p>
    Email previews are available for Rails 4.1+, so there&#39;s no longer a need to include a gem like
    <a href="https://github.com/ryanb/letter_opener" target="_blank">Letter Opener</a> or
    <a href="http://mailcatcher.me" target="_blank">MailCatcher</a>, or use a service like
    <a href="https://mailtrap.io" target="_blank">Mailtrap</a>. These are all great, but now we
    can preview emails right in the browser and use Live Reload, so it&#39;s like any other page in the app.
    <em>Email previews can be found here:</em>
  </p>

  <p>
    <a href="http://localhost:3000/rails/mailers" target="_blank">
      http://localhost:3000/rails/mailers
    </a>
  </p>

  <p>
    If you need to create additional email previews, the mailer preview classes are found in
    <code>spec/mailers/previews</code>, and additional documentation can be found here:
  </p>

  <p>
    <a href="http://api.rubyonrails.org/v4.1.0/classes/ActionMailer/Base.html#class-ActionMailer::Base-label-Previewing+emails" target="_blank">
      http://api.rubyonrails.org/v4.1.0/classes/ActionMailer/Base.html#class-ActionMailer::Base-label-Previewing+emails
    </a>
  </p>

  <h4 id="email-layout">
    3.2 Email Layout
    <a href="#welcome"><i class="fa fa-angle-up"></i></a>
  </h4>

  <p>
    Email layouts are just like application layouts, but <em>they don&#39;t include the html, body, or
    head tags.</em> The default layout is: <code>app/views/layouts/mailer.html.erb</code>, and it is
    used by default for all <a href="https://github.com/plataformatec/devise" target="_blank">Devise</a>
    emails: email confirmation, password reset, etc.
  </p>

  <p>
    The styles for the mailer layout are rendered by the file:
    <code>app/assets/mailer.scss</code>. This Sass file imports all styles from the folder
    <code>app/assets/mailer</code>, just like <code>application.scss</code>. The only difference
    is that <em>the styles from <code>mailer.scss</code> are injected as inline styles.</em>
  </p>
</section>

<section>
  <h2 id="codelation-assets">Codelation Assets</h2>

  <p>
    In Codelation Rails projects, everything has a place. CSS and JavaScript should apply to a
    <em>single page by default</em> and should only be <em>global on purpose.</em>
    This section will go over how we accomplish this.
  </p>
</section>

<section>
  <h3 id="codelation-assets-stylesheets">
    <span>
      <a href="#welcome"><i class="fa fa-arrow-circle-o-up"></i></a>
      1 Stylesheets
    </span>
  </h3>

  <p>
    Stylesheets are organized by layout, and within the layout they are organized into three folders.
    In the case of the application layout, we have an <code>application.scss</code> file and an
    <code>application</code> folder:
  </p>

<pre>
app/assets/stylesheets/application/components/
app/assets/stylesheets/application/layout/
app/assets/stylesheets/application/views/
app/assets/stylesheets/application.scss
</pre>

  <p>
    The <code>application.scss</code> <em>should not contain any styles</em>; it is only the manifest for
    which files are imported:
  </p>

<pre>
@import "codelation";
@import "application/variables";
@import "application/**/*";
</pre>

  <p>
    The <strong>components</strong> folder contains a single <code>.scss</code> file for each component defined.
    A component might be a button, link, table, or <em>any globally reusable style</em>.
    <a href="#sass-components">Read more</a>
  </p>

  <p>
    The <strong>layout</strong> folder contains files for defining styles on the body class, header, footer,
    and styles for flash messages that are <em>rendered on every page of the site</em>. Additional files
    can be added for other components that are rendered on every page.
  </p>

  <p>
    The <strong>views</strong> folder mirrors the files found in <code>app/views</code>. These styles are
    are not used on multiple pages of the site, but instead are <em>specific to a single page or
    controller</em>.
    <a href="#single-page-styles">Read more</a>
  </p>
</section>

<section>
  <h4 id="single-page-styles">
    1.1 Single Page Styles
    <a href="#welcome"><i class="fa fa-angle-up"></i></a>
  </h4>

  <p>

  </p>
</section>

<section>
  <h4 id="sass-components">
    1.2 Reusable Components
    <a href="#welcome"><i class="fa fa-angle-up"></i></a>
  </h4>

  <p>

  </p>
</section>

<section>
  <h4 id="sass-functions-and-mixins">
    1.3 Functions and Mixins
    <a href="#welcome"><i class="fa fa-angle-up"></i></a>
  </h4>

  <p>

  </p>
</section>

<section>
  <h3 id="codelation-assets-javascripts">
    <span>
      <a href="#welcome"><i class="fa fa-arrow-circle-o-up"></i></a>
      2 JavaScripts
    </span>
  </h3>

  <p>

  </p>
</section>

<section>
  <h4 id="single-page-scripts">
    2.1 Single Page Scripts
    <a href="#welcome"><i class="fa fa-angle-up"></i></a>
  </h4>

  <p>

  </p>
</section>

<section>
  <h4 id="javascript-components">
    2.2 Reusable Components
    <a href="#welcome"><i class="fa fa-angle-up"></i></a>
  </h4>

  <p>

  </p>
</section>

<section>
  <h1>Columns</h1>

  <div class="columns">
    <div>
      Bacon ipsum dolor amet pancetta capicola porchetta pig, ribeye t-bone pork belly. Boudin kevin pig andouille. Flank boudin ribeye chuck venison picanha meatball hamburger kielbasa ball tip beef beef ribs turducken fatback. Corned beef swine meatloaf, porchetta shankle strip steak t-bone fatback chicken ribeye landjaeger biltong ground round. Spare ribs pig leberkas ham, turducken kielbasa bacon frankfurter jowl chicken.
    </div>
    <div>
      Turducken sirloin biltong, pork belly leberkas pork chop meatloaf spare ribs bresaola. T-bone ham hock short ribs jowl. T-bone pork loin meatball, ball tip filet mignon pork chop tail pork belly prosciutto cow ribeye. Capicola turducken spare ribs, rump picanha corned beef frankfurter. Ham meatloaf corned beef, shank pastrami tail venison kevin. Turducken ground round pork chop, pig meatloaf drumstick kevin doner t-bone beef short loin cow pork loin venison alcatra.
    </div>
    <div>
      Short loin bacon leberkas, corned beef porchetta shoulder bresaola landjaeger. Fatback brisket tail rump tenderloin hamburger meatball ham shoulder strip steak spare ribs short ribs alcatra salami short loin. Andouille ham ball tip shank, porchetta ham hock sirloin kielbasa tongue doner. Prosciutto beef ribs sausage, andouille shankle shoulder tongue t-bone swine chuck pork belly kevin doner pork spare ribs. Ribeye spare ribs frankfurter pastrami tri-tip strip steak sirloin ground round.
    </div>
  </div>
</section>

<section>
  <h1>Cards</h1>

  <div class="cards">
    <div>
      Bacon ipsum dolor amet pancetta capicola porchetta pig, ribeye t-bone pork belly. Boudin kevin pig andouille.
    </div>
    <div>
      Turducken sirloin biltong, pork belly leberkas pork chop meatloaf spare ribs bresaola. T-bone ham hock short ribs jowl. T-bone pork loin meatball, ball tip filet mignon pork chop tail pork belly prosciutto cow ribeye.
    </div>
    <div>
      Short loin bacon leberkas, corned beef porchetta shoulder bresaola landjaeger. Fatback brisket tail rump tenderloin hamburger meatball ham shoulder strip steak spare ribs short ribs alcatra salami short loin. Andouille ham ball tip shank, porchetta ham hock sirloin kielbasa tongue doner.
    </div>
    <div>
      Turducken sirloin biltong, pork belly leberkas pork chop meatloaf spare ribs bresaola. T-bone ham hock short ribs jowl. T-bone pork loin meatball, ball tip filet mignon pork chop tail pork belly prosciutto cow ribeye. Capicola turducken spare ribs, rump picanha corned beef frankfurter.
    </div>
  </div>
</section>

<section>
  <h1>Center Children</h1>

  <div class="center-children">
    <h1>Hello World!</h1>
    <p>
      Bacon ipsum dolor amet pancetta capicola porchetta pig
    </p>
  </div>
</section>
